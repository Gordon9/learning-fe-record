@import url('https://fonts.googleapis.com/css2?family=Quicksand&display=swap');
$hue: 50;
$shift: 30;
$color: hsl($hue,
30%,
60%);
$light: lighten(adjust-hue($color, $shift),
20%);
$lighter: lighten(adjust-hue($color, $shift * 2),
40%);
$dark: darken(adjust-hue($color, -$shift),
10%);
$darker: darken(adjust-hue($color, -$shift * 2),
20%);
$pop: hsl($hue - 180,
80%,
60%);
$base: 1.2vh;
$short: 200ms;
$mid: 600ms;
$long: 2000ms;
$ease-in: cubic-bezier(0.755,
0.05,
0.855,
0.06);
$ease-out: cubic-bezier(0.23,
1,
0.32,
1);
$grid-size: 10rem;
$rows: 5;
$cols: 5;
@mixin absolute {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

html {
    font-size: $base;
}

body {
    height: 100vh;
    width: 100vw;
    overflow: hidden;
    color: white;
    font-size: 2rem;
    font-family: "Quicksand", sans-serif;
    background: $darker;
}

.center {
    position: absolute;
    top: 50%;
    left: 50%;
    width: $grid-size * $cols;
    height: $grid-size * $rows;
    transform: translate(-50%, -50%) perspective(100rem) rotate(-45deg);
}

.level {
    opacity: 1;
    transform: translate($grid-size * 2, -$grid-size * 2);
    pointer-events: none;
    transition: transform $mid $ease-out, opacity $mid $ease-out;
    &[l="1"] {
        pointer-events: auto;
        transform: translate(0, 0);
    }
    &:hover .finsh {
        transform: scale(1);
        opacity: 1;
        pointer-events: auto;
        transition: transform $short $ease-out, opacity $short linear;
    }
}

#level-one {
    position: absolute;
    z-index: 10000;
}

.step {
    width: $grid-size * 1.01;
    height: $grid-size * 1.01;
    background: $light;
    position: absolute;
    left: 0;
    top: 0;
    opacity: 0;
    transform: translate(-$grid-size/2, $grid-size/2);
    pointer-events: none;
    transition: tranform $mid $ease-in, opacity $mid linear;
    &::before,
    &::after {
        content: "";
        @include absolute;
        pointer-events: none !important;
    }
    &::before {
        left: -20%;
        background: $dark;
        transform-origin: 100% 100%;
        transform: skewY(-45deg);
        width: 20%;
    }
    &::after {
        top: 100%;
        background: $color;
        transform-origin: 0 0;
        height: 20%;
        transform: skewX(-45deg);
    }
    &.start,
    &:hover,
    &:hover+.step {
        transform: scale(1);
        opacity: 1;
        pointer-events: auto;
        transition: transoform $short $ease-out, opacity $short linear;
    }
    @for $r from 1 through 4 {
        &[r="#{$r}"] {
            top: $r * 10rem;
        }
    }
    @for $c from 1 through 4 {
        &[c="#{$c}"] {
            left: $c * 10rem;
        }
    }
    @for $r from 0 through 4 {
        @for $c from 0 through 4 {
            &[c="#{$c}"][r="#{$r}"] {
                z-index: ($r + 1) * ($cols - $c);
            }
        }
    }
}